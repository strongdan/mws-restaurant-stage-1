{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/sw.js"],"names":[],"mappings":"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","file":"sw.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","const appName = \"restaurant-reviews\"\nconst staticCacheName = appName + \"-v1.0\";\nconst contentImgsCache = appName + \"-images\";\n\nvar allCaches = [\n  staticCacheName,\n  contentImgsCache\n];\n\n/** At Service Worker Install time, cache all static assets */\nself.addEventListener('install', function(event) {\n  event.waitUntil(\n    caches.open(staticCacheName).then(function(cache) {\n      return cache.addAll([\n        '/', // this caches index.html\n        '/restaurant.html',\n        '/css/styles.css',\n        '/css/medium.css',\n        '/js/main.js',\n        '/js/restaurant_info.js',\n        'data/restaurants.json'\n        // add other static assets here like logos, svg icons or any\n        // other asset needed for your app UI \n        // (Don't add restaurant images, as they are not part of your\n        // application's UI)\n      ]);\n    })\n  );\n});\n\n/** At Service Worker Activation, Delete previous caches, if any */\nself.addEventListener('activate', function(event) {\n  event.waitUntil(\n    caches.keys().then(function(cacheNames) {\n      return Promise.all(\n        cacheNames.filter(function(cacheName) {\n          return cacheName.startsWith(appName) &&\n                 !allCaches.includes(cacheName);\n        }).map(function(cacheName) {\n          return caches.delete(cacheName);\n        })\n      );\n    })\n  );\n});\n\n/** Hijack fetch requests and respond accordingly */\nself.addEventListener('fetch', function(event) {\n  const requestUrl = new URL(event.request.url);\n\n  // only highjack request made to our app (not mapbox maps or leaflet, for example)\n  if (requestUrl.origin === location.origin) {\n\n    // Since requests made to restaurant.html have search params (like ?id=1), the url can't be used as the\n    // key to access the cache, so just respondWith restaurant.html if pathname startsWith '/restaurant.html'\n    if (requestUrl.pathname.startsWith('/restaurant.html')) {\n      event.respondWith(caches.match('/restaurant.html'));\n      return; // Done handling request, so exit early.\n    }\n\n    // If the request pathname starts with /img, then we need to handle images.\n    if (requestUrl.pathname.startsWith('/img')) {\n      event.respondWith(serveImage(event.request));\n      return; // Done handling request, so exit early.\n    }\n  }\n\n  // Default behavior: respond with cached elements, if any, falling back to network.\n  event.respondWith(\n    caches.match(event.request).then(function(response) {\n      return response || fetch(event.request);\n    })\n  );\n});\n\nfunction serveImage(request) {\n  let imageStorageUrl = request.url;\n\n  // Make a new URL with a stripped suffix and extension from the request url\n  // i.e. /img/1-medium.jpg  will become  /img/1\n  // we'll use this as the KEY for storing image into cache\n  imageStorageUrl = imageStorageUrl.replace(/-small\\.\\w{3}|-medium\\.\\w{3}|-large\\.\\w{3}/i, '');\n\n  return caches.open(contentImgsCache).then(function(cache) {\n    return cache.match(imageStorageUrl).then(function(response) {\n      // if image is in cache, return it, else fetch from network, cache a clone, then return network response\n      return response || fetch(request).then(function(networkResponse) {\n        cache.put(imageStorageUrl, networkResponse.clone());\n        return networkResponse;\n      });\n    });\n  });\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}